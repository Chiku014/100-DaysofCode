Day 138/150: 

Problem Statement #3147

Problem Statement Explanation:

You're given an array energy of length n and an integer k. You can start your journey at any index i. 
From your current index j, your next move is always to j + k. 
You continue this process until your next move would take you out of the array's bounds.
Your total energy is the sum of energy[j] for all indices j you visit. 
The goal is to find the maximum possible total energy you can gain by choosing the best starting index.

Solution Approach:

The key observation is that the possible moves create k independent paths. 
For example, if you start at index 0, you can only visit indices 0, k, 2k, .... If you start at 1, you visit 1, 1+k, 1+2k, ..., and so on. We can't jump between these paths.
This problem can be solved efficiently using a dynamic programming approach. 
We can think of the total energy from a starting index i as energy[i] plus the total energy from the next stop, which is i + k.
We can calculate this for every index by iterating backward through the array. 
By updating the array in place, we can make energy[i] store the total energy for the entire path starting from that index.

The algorithm is:
Iterate from i = n - 1 - k down to 0.
For each i, update its value by adding the energy from its next stop: energy[i] = energy[i] + energy[i + k].
After this loop, energy[i] holds the total energy for the path starting at i.
The answer is simply the maximum value in the now-modified energy array.

Example Walkthrough
Let's take energy = [5, 2, -10, -5, 1] and k = 3.
Initial Array: [5, 2, -10, -5, 1]
We start the backward loop from i = n - 1 - k = 5 - 1 - 3 = 1.
i = 1: energy[1] += energy[1 + 3]. So, energy[1] becomes 2 + 1 = 3.
The array is now [5, 3, -10, -5, 1].
i = 0: energy[0] += energy[0 + 3]. So, energy[0] becomes 5 + (-5) = 0.
The array is now [0, 3, -10, -5, 1].
The final modified array represents the total energy from each possible starting point.

Here's the code:

class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int n = energy.length;
        int maxEnergy = Integer.MIN_VALUE;

        for (int i = n - 1 - k; i >= 0; i--) {
            energy[i] += energy[i + k];
        }

        for (int e : energy) {
            if (e > maxEnergy) {
                maxEnergy = e;
            }
        }

        return maxEnergy;
    }
}

Complexity:

Time Complexity: O(n)
Space Complexity: O(1)






The maximum value in [0, 3, -10, -5, 1] is 3.

