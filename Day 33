Day 33/100:  Longest Subsequence Repeated K Times

Problem Statement #2014

Problem Statement:

Given a string s and an integer k, return the longest subsequence repeated k or more times.
A subsequence is a sequence that can be derived from another string by deleting some or no elements without changing the order of the remaining elements.
The answer must be the lexicographically largest such subsequence.
If multiple answers exist, return the one with higher lexicographic order.


Solution Approach:

BFS + Frequency Filtering
First, count character frequency.
Only consider characters that appear at least k times.
Perform BFS to build subsequences level by level.
For each candidate, check if its k repetitions form a subsequence of s.
Keep track of the longest and lexicographically largest valid string.


Here's the code;

import java.util.*;

class Solution {
    public String longestSubsequenceRepeatedK(String s, int k) {
        // Step 1: Count character frequencies
        Map<Character, Integer> freq = new HashMap<>();
        for (char c : s.toCharArray()) {
            freq.put(c, freq.getOrDefault(c, 0) + 1);
        }

        // Step 2: Filter only those characters that appear at least k times
        List<Character> candidates = new ArrayList<>();
        for (char c = 'a'; c <= 'z'; c++) {
            if (freq.getOrDefault(c, 0) >= k) {
                candidates.add(c);
            }
        }

        // Step 3: Start BFS
        Queue<String> queue = new LinkedList<>();
        queue.add("");
        String result = "";

        while (!queue.isEmpty()) {
            int size = queue.size();
            List<String> nextLevel = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                for (char c : candidates) {
                    String next = cur + c;
                    if (isValid(s, next, k)) {
                        nextLevel.add(next);
                        if (next.length() > result.length() || 
                            (next.length() == result.length() && next.compareTo(result) > 0)) {
                            result = next;
                        }
                    }
                }
            }
            queue.addAll(nextLevel);
        }

        return result;
    }

    private boolean isValid(String s, String target, int k) {
        if (target.isEmpty()) return false;

        String repeated = target.repeat(k);
        int idx = 0;
        for (char c : s.toCharArray()) {
            if (c == repeated.charAt(idx)) {
                idx++;
                if (idx == repeated.length()) return true;
            }
        }
        return false;
    }
}
Complexity:

Time Complexity: O(N * M) 
Space Complexity: O(N)
