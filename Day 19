Day 19/100: Minimize the Maximum Difference of Pairs

Problem Statement #2616 

Approach
Sort the Array: Sorting helps in easily finding pairs with the smallest differences adjacent to each other.
Binary Search for Minimum Maximum Difference: Perform binary search on possible values of the maximum difference (from 0 to the maximum difference in the sorted array). 
For each midpoint value, check if we can form at least p pairs where each pair's difference is â‰¤ midpoint.
Greedy Pair Selection: Traverse the sorted array and greedily select pairs of adjacent elements if their difference is within the current candidate maximum difference.

Here's the code;

import java.util.Arrays;

class Solution {
    public int minimizeMax(int[] nums, int p) {
        if (p == 0) return 0;
        Arrays.sort(nums);
        int left = 0;
        int right = nums[nums.length - 1] - nums[0];
        int result = right;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canFormPairs(nums, mid, p)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }

    private boolean canFormPairs(int[] nums, int maxDiff, int p) {
        int count = 0;
        int i = 0;
        while (i < nums.length - 1) {
            if (nums[i + 1] - nums[i] <= maxDiff) {
                count++;
                i += 2;
            } else {
                i++;
            }
            if (count >= p) {
                return true;
            }
        }
        return count >= p;
    }
}


Time Complexity: O(n log n)
Space Complexity: O(log n)
