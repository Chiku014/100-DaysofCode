Day 44/100: 1751. Maximum Number of Events That Can Be Attended II

Problem Statement #1751

Probelm Statement Explanation:

You are given an array of events where each event has a start day, end day, and a value. 
You are also given an integer k, the maximum number of events you can attend.
Each event has a duration from startDay to endDay (inclusive), and you can’t attend overlapping events. 
You can choose at most k events. 
Your goal is to maximize the total value of the events you attend.

Solution Approach:

Sort the events based on their start time.
Use memoization (top-down DP) to remember results for each (index, k) pair.

For each event, we decide:
1. Attend the event → move to the next non-overlapping event and reduce k.
2. Skip the event → move to the next event with same k.
Use binary search to quickly find the next non-overlapping event.


Here's the code:

import java.util.*;

public class Solution {
    public int maxValue(int[][] events, int k) {
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int n = events.length;
        int[][] memo = new int[n][k + 1];
        for (int[] row : memo) Arrays.fill(row, -1);
        return dfs(0, k, events, memo);
    }

    private int dfs(int i, int k, int[][] events, int[][] memo) {
        if (i == events.length || k == 0) return 0;
        if (memo[i][k] != -1) return memo[i][k];

        int next = binarySearch(events, i + 1, events[i][1]);

        int skip = dfs(i + 1, k, events, memo);
        int take = events[i][2] + dfs(next, k - 1, events, memo);

        memo[i][k] = Math.max(skip, take);
        return memo[i][k];
    }

    private int binarySearch(int[][] events, int start, int endTime) {
        int low = start, high = events.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (events[mid][0] <= endTime) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}

Complexity:

Time Complexity: O(n * k * log n)
Space Complexity: O(n * k)
