Day 1/100: Diameter of Binary Tree

Today I worked on LeetCode problem 543 - finding the diameter of a binary tree. 
The diameter is the longest path between any two nodes in the tree, measured by the number of edges between them. Interestingly, this longest path might not necessarily go through the root node.


My solution uses a recursive approach:

1. For each node, I calculate how deep its left and right subtrees go
2. As I do this, I keep track of the maximum diameter found so far (which is the sum of left and right depths)
3. The function returns the depth of the current node's deeper subtree plus one (for the current node itself)

Here's the code I came up with,

class Solution {
    private int maxDiameter = 0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        depth(root);
        return maxDiameter;
    }
    
    private int depth(TreeNode node) {
        if (node == null) return 0;
        int left = depth(node.left);
        int right = depth(node.right);
        maxDiameter = Math.max(maxDiameter, left + right);
        return 1 + Math.max(left, right);
    }
}

Complexity
Time: O(n) → Each node is visited once.
Space: O(h) → Recursion stack height = tree height.
