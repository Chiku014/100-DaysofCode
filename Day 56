Day 56/100:

Problem Statement #1948

Problem Statement Explanation:

You are given a list of folder paths, where each path represents directories in a file system. 
Some folders may contain duplicate subfoldersâ€”meaning that two or more directories (at any location) have identical subfolder structures and names. 
Your task is to delete all such duplicate folders and return the list of remaining folder paths.

Solution Approach:

Approach
Trie Construction:
Build a Trie (prefix tree) to model the folder hierarchy. 
Each node represents a folder, and child nodes represent subfolders. 
This structure allows efficient representation and traversal of all given paths.

Subtree Serialization & Duplicate Detection:
For each Trie node, serialize the entire subtree structure into a unique string. 
If two or more Trie nodes yield the same serialization, they represent duplicate subfolders. 
Mark these nodes (and corresponding paths) for deletion.

Trie Traversal & Result Compilation:
Traverse the Trie again, collecting only those folder paths that do not lead through a deleted (duplicate) node.

Here's the code:

import java.util.*;

class Solution {
    class TrieNode {
        Map<String, TrieNode> children = new HashMap<>();
        boolean deleted = false;
    }

    private TrieNode root = new TrieNode();

    public List<List<String>> deleteDuplicateFolder(List<List<String>> paths) {
        // Step 1: Build Trie
        paths.sort((a, b) -> {
            for (int i = 0; i < Math.min(a.size(), b.size()); ++i) {
                int cmp = a.get(i).compareTo(b.get(i));
                if (cmp != 0) return cmp;
            }
            return Integer.compare(a.size(), b.size());
        });
        for (List<String> path : paths) {
            TrieNode node = root;
            for (String s : path) {
                node.children.putIfAbsent(s, new TrieNode());
                node = node.children.get(s);
            }
        }

        // Step 2: Serialize subtrees and mark duplicates
        Map<String, List<TrieNode>> subtreeToNodes = new HashMap<>();
        buildSubtreeToRoots(root, subtreeToNodes);

        for (List<TrieNode> nodes : subtreeToNodes.values()) {
            if (nodes.size() > 1) {
                for (TrieNode node : nodes) node.deleted = true;
            }
        }

        // Step 3: Gather results by traversing Trie (excluding deleted subtrees)
        List<List<String>> ans = new ArrayList<>();
        constructPath(root, new ArrayList<>(), ans);
        return ans;
    }

    // Returns a unique serialization key for the subtree
    private String buildSubtreeToRoots(TrieNode node, Map<String, List<TrieNode>> map) {
        StringBuilder sb = new StringBuilder("(");
        for (String s : node.children.keySet()) {
            TrieNode child = node.children.get(s);
            sb.append(s).append(buildSubtreeToRoots(child, map));
        }
        sb.append(")");
        String subtree = sb.toString();
        if (!subtree.equals("()")) {
            map.putIfAbsent(subtree, new ArrayList<>());
            map.get(subtree).add(node);
        }
        return subtree;
    }

    private void constructPath(TrieNode node, List<String> path, List<List<String>> ans) {
        for (String s : node.children.keySet()) {
            TrieNode child = node.children.get(s);
            if (!child.deleted) {
                path.add(s);
                constructPath(child, path, ans);
                path.remove(path.size() - 1);
            }
        }
        if (!path.isEmpty())
            ans.add(new ArrayList<>(path));
    }
}


Complexity:

Time Complexity: O(N*L)
Space Complexity: O(N*L)
