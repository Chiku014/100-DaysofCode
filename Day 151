Day 151/200: Check If Digits Are Equal in String After Operations I

Problem Statement #3461

Problem Statement Explanation:
You are given a string s consisting of digits.
Perform the following operation repeatedly until the string has exactly two digits:
For each pair of consecutive digits in s, starting from the first digit, calculate a new digit as the sum of the two digits modulo 10.
Replace s with the sequence of newly calculated digits, maintaining the order in which they are computed.
Return true if the final two digits in s are the same; otherwise, return false.

Examples
Example 1:
Input: s = "3902"
Output: true

Explanation:
Initially, s = "3902".
First operation: (3 + 9) % 10 = 2, (9 + 0) % 10 = 9, (0 + 2) % 10 = 2. s becomes "292".
Second operation: (2 + 9) % 10 = 1, (9 + 2) % 10 = 1. s becomes "11".
Since the digits in "11" are the same, the output is true.

Example 2:
Input: s = "34789"
Output: false

Explanation:

Initially, s = "34789".
After the first operation, s = "7157".
After the second operation, s = "862".
After the third operation, s = "48".
Since '4' != '8', the output is false.

Constraints:
3 <= s.length <= 100
s consists of only digits.

Solution Approach:

This problem is a straightforward simulation. 
We just need to implement the operation exactly as described and repeat it until the string's length is reduced to 2.
Main Loop: We'll use a while loop that continues as long as s.length() > 2.
Building the New String: Inside the loop, we can't modify the string in place. 
Instead, we'll create a new string for the next iteration. 
A StringBuilder is perfect for this, as it's efficient for repeated appends.
Iterating Pairs: We'll use a for loop to iterate through the current string s from i = 0 up to s.length() - 2. 
This allows us to look at all adjacent pairs (s.charAt(i), s.charAt(i+1)).

Calculating the New Digit:

We get the integer value of each character by subtracting the ASCII value of '0' (e.g., s.charAt(i) - '0').
We calculate the sum and apply the modulo 10 operator: (digit1 + digit2) % 10.
We append this new integer digit to our StringBuilder.
Updating the String: After the for loop finishes, the StringBuilder contains the complete new string. 
We update s by converting the StringBuilder back to a String (s = nextString.toString()). 
The while loop then checks the length of this new s and repeats if necessary.
Final Check: Once the while loop terminates (meaning s.length() == 2), we simply compare the two remaining characters: return s.charAt(0) == s.charAt(1);.

Here's the code:

class Solution {
    public boolean hasSameDigits(String s) {
        while (s.length() > 2) {
            StringBuilder nextString = new StringBuilder();
            
            for (int i = 0; i < s.length() - 1; i++) {
                int digit1 = s.charAt(i) - '0';
                int digit2 = s.charAt(i + 1) - '0';
                
                int newDigit = (digit1 + digit2) % 10;
                nextString.append(newDigit);
            }
            
            s = nextString.toString();
        }
        
        return s.charAt(0) == s.charAt(1);
    }
}

Complexity:

Time Complexity: O(N^2)
Space Complexity: O(N)




