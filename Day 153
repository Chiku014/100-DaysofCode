Day 153/200: Calculate Money in LeetCode Bank

Problem Statement #1716

Problem Statenent Explanation:

Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.
On the first Monday (Day 1), he puts in $1.
On Tuesday (Day 2), he puts in $2.
On Sunday (Day 7), he puts in $7.
On the next Monday (Day 8), he starts over but puts in $1 more than the previous Monday.
On this Monday (Day 8), he puts in $2.
On Tuesday (Day 9), he puts in $3.
On the next Sunday (Day 14), he puts in $8.

This pattern continues. Given an integer n (the total number of days), calculate the total amount of money he will have in the bank at the end of the nth day.

Examples:

Example 1:
Input: n=10
Output: 37

Explanation:
Day 1 (Mon): $1
Day 2 (Tue): $2
Day 3 (Wed): $3
Day 4 (Thu): $4
Day 5 (Fri): $5
Day 6 (Sat): $6
Day 7 (Sun): $7
Day 8 (Mon): $2
Day 9 (Tue): $3
Day 10 (Wed): $4

Total = 1+2+3+4+5+6+7+2+3+4=37

Example 2:

Input: n=20
Output: 96

Solution Approach:

We can solve this problem using two main approaches: direct simulation or a mathematical formula.
Approach 1: Direct Simulation (O(n))
This is the most straightforward approach. We can iterate from Day 1 to Day n, keeping track of the current day of the week and the starting amount for the current week's Monday.
Initialize total = 0 and mondayStart = 1.
Loop from day = 1 to n.
Inside the loop, we need to know what day of the week it is. We can use the modulo operator: (day - 1) % 7.
This gives 0 for Monday, 1 for Tuesday, ..., 6 for Sunday.
The amount to deposit on the current day is mondayStart + (day - 1) % 7.
Add this deposit to the total.
Check if the current day is a Sunday. The condition day % 7 == 0 is true on Day 7, Day 14, etc.
If it is a Sunday, increment mondayStart to prepare for the next week.
After the loop finishes, return total.

Here's the code:

class Solution {
    public int totalMoney(int n) {
        int total = 0;
        int mondayStart = 1;

        for (int day = 1; day <= n; day++) {
            // (day - 1) % 7 gives 0 for Mon, 1 for Tue, ... 6 for Sun
            int deposit = mondayStart + (day - 1) % 7;
            total += deposit;

            // If today is Sunday, increment the start for next Monday
            if (day % 7 == 0) {
                mondayStart++;
            }
        }
        return total;
    }
}

Complexity:

Time Complexity: O(n)
Space Complexity: O(1)





