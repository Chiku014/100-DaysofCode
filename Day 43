Day 43/100: Maximum Number of Events that can be Attended 

Probelem Staement #1353

Probelem Statement Explanatation:

1. Given an array of events where events[i] = [startDayi, endDayi], you can attend an event i at any day d where startDayi <= d <= endDayi. 
2. You can only attend one event at any time d. 
3. The goal is to return the maximum number of events you can attend.

Solution Approach:

Sort Events by Start Day: 
First, sort all events based on their start days. 
If two events have the same start day, prioritize the one with the earlier end day.
Use a Min-Heap for End Days: As we process each event, add its end day to a min-heap. 
This helps in keeping track of the earliest ending events first.

Process Each Day: 
For each day from the earliest start day to the latest end day:
Add all events that start on the current day to the min-heap.
Remove any events from the heap whose end day has passed the current day.
If there are events left in the heap, attend the one with the earliest end day (remove it from the heap) and increment the count of attended events.

Here's the code:

import java.util.Arrays;
import java.util.PriorityQueue;

public class Solution {
    public int maxEvents(int[][] events) {
        Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int maxEvents = 0;
        int i = 0;
        int n = events.length;
        int currentDay = 0;

        while (i < n || !minHeap.isEmpty()) {
            if (minHeap.isEmpty()) {
                currentDay = events[i][0];
            }
            while (i < n && events[i][0] <= currentDay) {
                minHeap.offer(events[i][1]);
                i++;
            }
            minHeap.poll();
            maxEvents++;
            currentDay++;

            while (!minHeap.isEmpty() && minHeap.peek() < currentDay) {
                minHeap.poll();
            }
        }

        return maxEvents;
    }
}

Complexity:

Time Complexity: O(n log n)
Space Complexity: O(n)
