Day 13/100: Lexicographically Minimum String After Removing Stars

Problem Statement: #3170

Solution Approach:
The solution uses a TreeMap to keep track of character indices in sorted order, allowing efficient retrieval of the smallest character to the left of each star. Here's how it works:
Use a TreeMap to map characters to their indices (stored in a TreeSet for ordered access)
Maintain a boolean array to track deleted characters

Here's the code:

import java.util.TreeMap;
import java.util.TreeSet; 
import java.util.Map;

class Solution {
    public String clearStars(String s) { 
        TreeMap<Character, TreeSet<Integer>> charIndices = new TreeMap<>();
        boolean[] deleted = new boolean[s.length()];

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '*') {
                char smallestChar = charIndices.firstKey();
                int indexToDelete = charIndices.get(smallestChar).pollLast();
                deleted[indexToDelete] = true;

                if (charIndices.get(smallestChar).isEmpty()) {
                    charIndices.remove(smallestChar);
                }
            } else {
                charIndices.computeIfAbsent(c, k -> new TreeSet<>()).add(i);
            }
        }
        StringBuilder resultBuilder = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (!deleted[i] && s.charAt(i) != '*') {
                resultBuilder.append(s.charAt(i));
            }
        }
        return resultBuilder.toString();
    }
}

Complexity:
Time Complexity: O(n log n)
Space Complexity: O(n)
