Day 80/100: Power of Three

Problem Statement #326

Problem Statement Explanation:

Given an integer n, return true if it is a power of three. Otherwise, return false.
An integer n is a power of three if there exists an integer x such that n == 3^x.

Examples:

Input: n = 27
Output: true (Since 27=3^3)

Input: n = 0
Output: false

Input: n = 1
Output: true (Since 1=3^0)

Input: n = 45
Output: false


Solution Approach:

1. Iterative Division
The most direct approach is to check if a number's only prime factor is 3.

First, handle the edge case by returning false if n is zero or negative. Then, use a loop to repeatedly divide n by 3 as long as it's perfectly divisible. If the final result is 1, the original number was a power of three.

2. Constant Time (Integer Limitation)
A more efficient method uses a mathematical trick based on the maximum value of a 32-bit integer.

The largest power of 3 that can fit in an int is 3^19, which is 1,162,261,467. 
Any number that is a power of three (like 3^2 or 3^5) must be a divisor of this largest power.

Therefore, the solution simplifies to a single check: Return true if n is positive and 1162261467 % n == 0.

Complexity:

Time Complexity: O(log_3n)
Space Complexity: O(1)
