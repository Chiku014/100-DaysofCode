Day 24/100: Divide Array into Arrays with Max Difference

Problem Statement #2966
1. Given an integer array nums of size n where n is a multiple of 3 and a positive integer k. 
2. We need to divide the array into n/3 groups of size 3 such that the difference between any two elements in any group is less than or equal to k. 
3. If it's impossible to satisfy this condition, return an empty array. If there are multiple valid solutions, return any one of them.

Solution Approach:
Sort the Array: Sorting helps in easily accessing the smallest and largest elements in any potential group of three.
Check Groups: Iterate through the sorted array in steps of three. For each group of three consecutive elements.

Here's the code:

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[][] divideArray(int[] nums, int k) {
        Arrays.sort(nums);
        List<int[]> result = new ArrayList<>();
        int n = nums.length;
        
        for (int i = 0; i < n; i += 3) {
            if (i + 2 >= n) {
                return new int[0][0];
            }
            int a = nums[i];
            int b = nums[i + 1];
            int c = nums[i + 2];
            
            if (c - a > k) {
                return new int[0][0];
            }
            
            result.add(new int[]{a, b, c});
        }
        
        return result.toArray(new int[result.size()][]);
    }
}

Complexity:
Time Complexity: O(n log n)
Space Complexity: O(n)
