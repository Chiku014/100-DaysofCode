Day 68/100: Pascal's Triangle

Problem Statement #118

Problem Statement Explanation:

Given an integer numRows, return the first numRows of Pascal's triangle.

What is Pascal's Triangle?
Pascal's triangle is a triangular array of numbers where:

The triangle starts with a single 1 at the top
Each row begins and ends with 1
Every other number is the sum of the two numbers directly above i

Solution Approach:

The solution uses dynamic programming to build Pascal's triangle row by row:

Initialize: Create an empty list to store all rows of the triangle
Base Case: The first row is always [1]
Build Each Row: For each subsequent row i:

Start with 1 (first element)
Calculate middle elements using the formula: triangle[i-1][j-1] + triangle[i-1][j]
End with 1 (last element)


Return: The complete triangle

Here's the code:

class Solution {
  public List<List<Integer>> generate(int numRows) {
    List<List<Integer>> ans = new ArrayList<>();

    for (int i = 0; i < numRows; ++i) {
      Integer[] temp = new Integer[i + 1];
      Arrays.fill(temp, 1);
      ans.add(Arrays.asList(temp));
    }

    for (int i = 2; i < numRows; ++i)
      for (int j = 1; j < ans.get(i).size() - 1; ++j)
        ans.get(i).set(j, ans.get(i - 1).get(j - 1) + ans.get(i - 1).get(j));

    return ans;
  }
}

complexity:

Time complexity: O(n^2)
Space complexity: O(n^2)
