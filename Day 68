Day 68/100: Pascal's Triangle

Problem Statement #118

Problem Statement Explanation:

Given an integer numRows, return the first numRows of Pascal's triangle.

What is Pascal's Triangle?
Pascal's triangle is a triangular array of numbers where:

The triangle starts with a single 1 at the top
Each row begins and ends with 1
Every other number is the sum of the two numbers directly above i

Solution Approach:

The solution uses dynamic programming to build Pascal's triangle row by row:

Initialize: Create an empty list to store all rows of the triangle
Base Case: The first row is always [1]
Build Each Row: For each subsequent row i:

Start with 1 (first element)
Calculate middle elements using the formula: triangle[i-1][j-1] + triangle[i-1][j]
End with 1 (last element)


Return: The complete triangle

Here's the code:

import java.util.*;

public class Solution {
    public int minOperationsToMakeDistinct(List<Integer> nums) {
        int operations = 0;

        while (true) {
            Set<Integer> unique = new HashSet<>(nums);
            if (unique.size() == nums.size()) {
                break; // All elements are distinct
            }

            // Perform operation: remove first 3 elements (or fewer if not enough)
            int toRemove = Math.min(3, nums.size());
            for (int i = 0; i < toRemove; i++) {
                nums.remove(0);
            }

            operations++;
        }

        return operations;
    }

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<>();

        for (int i = 0; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            row.add(1);

            for (int j = 1; j < i; j++) {
                int prevRowVal = triangle.get(i - 1).get(j - 1) + triangle.get(i - 1).get(j);
                row.add(prevRowVal);
            }

            if (i > 0) row.add(1);

            triangle.add(row);
        }

        return triangle;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        List<Integer> nums1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 2, 3, 3, 5, 7));
        List<Integer> nums2 = new ArrayList<>(Arrays.asList(4, 5, 6, 4, 4));
        List<Integer> nums3 = new ArrayList<>(Arrays.asList(6, 7, 8, 9));

        System.out.println(solution.minOperationsToMakeDistinct(nums1)); // Output: 2
        System.out.println(solution.minOperationsToMakeDistinct(nums2)); // Output: 2
        System.out.println(solution.minOperationsToMakeDistinct(nums3)); // Output: 0

        // Pascal's Triangle
        System.out.println(solution.generate(5)); // [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
        System.out.println(solution.generate(1)); // [[1]]
    }
}

complexitY:

Time complexity: O(n^2)
Space complexity: O(n^2)
