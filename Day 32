Day 32/100:  Longest Binary Subsequence Less Than or Equal to K

Problem Statement #2311

Problem Statement:

You are given a binary string s and a positive integer k.
Return the length of the longest subsequence of s that represents a binary number less than or equal to k.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.


Solution Approach:

Traverse s from right to left (least significant to most).
Always include '0's (they don’t change the value).
Only include '1's if adding their binary value doesn’t exceed k.
Keep track of the total value and power of 2 (base).
Don’t stop early — continue collecting '0's even if base > k.

Here's the code;

class Solution {
  public int longestSubsequence(String s, int k) {
    int oneCount = 0;
    int num = 0;
    int pow = 1;

    // Take as many 1s as possible from the right.
    for (int i = s.length() - 1; i >= 0 && num + pow <= k; --i) {
      if (s.charAt(i) == '1') {
        ++oneCount;
        num += pow;
      }
      pow *= 2;
    }

    return (int) s.chars().filter(c -> c == '0').count() + oneCount;
  }
}

Complexity:

Time Complexity: O(n)
Space Complexity: O(1)
